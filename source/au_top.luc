module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  value_store valuestorer;
  
  counter slowclock(#SIZE(1),#DIV(26), .clk(clk), .rst(rst)); //slows down the CLK signal
  
  edge_detector rstDetect (#RISE(1), #FALL(0), .clk(clk));
  button_conditioner rstCond (.clk(clk), .in(io_button[2]));
  
  button_conditioner buttoncond[2](.clk(clk));
  edge_detector slowClockEdge(.clk(clk)); //helps to reduce the chances for our system to go in metastable state
  
  
  const CLKSPEED = 26;
  dff counter[CLKSPEED](.clk(clk),.rst(rst));
  
  alu alu_; 
  alu_test alu_test_;
  
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    
    reset_conditioner reset_cond;
    .rst(rst){
      fsm state(.clk(clk), .rst(rst)) = {MANUAL, AUTO};
    }
  }
  
  always {
    
    counter.d = counter.q+1;
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    
    slowClockEdge.in = slowclock.value;
    
     buttoncond.in[0] = io_button[0];
    buttoncond.in[1] = io_button[1];
    
    
    rstDetect.in = rstCond.out;
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off

    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
    /*************************************/
    /*******start of our code here*******/
     
    valuestorer.clk = clk;
    valuestorer.btna = io_button[3]; // after inputting A on the FPGA, press button 3 to store the value into the FPGA
    valuestorer.btnb = io_button[4]; // after inputting B on the FPGA, press button 4 to store the value into the FPGA
    valuestorer.values[7:0] = io_dip[0]; // key in 16-bits into the FPGA by using io_dip[1:0]
    valuestorer.values[15:8] = io_dip[1];
    
    valuestorer.rst = rstDetect.out; 
    
    alu_.alufn = io_dip[2][5:0]; // key in 6-bits alufn into the FPGA by using io_dip[2][5:0]
    alu_.x = valuestorer.outA;
    alu_.y = valuestorer.outB; 
    
    alu_test_.alufn = io_dip[2][5:0];
    alu_test_.rst = rst;
    alu_test_.clk = slowclock.value;
    alu_test_.disrupiton = buttoncond.out[1];
    alu_test_.button = buttoncond.out[0]; // for auto test cases, press button 0 to proceed to next test case
    
    
    io_led[2][5:0] = io_dip[2][5:0];
    case(state.q){
      state.MANUAL: // manual testing happens in this state
      if(io_dip[2][7]){ // if io_dip[2][7] is 1, auto testing is executed. Else, manual testing is executed.
        state.d = state.AUTO;
        }
      else{
        state.d = state.MANUAL;
        io_led[1] = alu_.out[15:8]; // 16-bits output is shown on io_led[1:0]
        io_led[0] = alu_.out[7:0];
        }
      state.AUTO: // auto testing happens in this state
          if(io_dip[2][7]){
        io_led[0][0] = alu_test_.out; // true if alu output and expected output are equal
        io_led[1][7:1] = alu_test_.led;
        io_led[1][0] = buttoncond.out[0];
        state.d = state.AUTO;
        }
      else{
          state.d = state.MANUAL;
        }
  }
}