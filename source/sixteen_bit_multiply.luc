module sixteen_bit_multiply (
    input a[16],
    input b[16],  
    output out[16]
  ) {
  
  sixteen_bit_and_gate and2_[16];
  sixteen_bit_adder adder_[16];
  
  always {
    and2_.a[0] = a;
    and2_.a[1] = a;
    and2_.a[2] = a;
    and2_.a[3] = a;
    and2_.a[4] = a;
    and2_.a[5] = a;
    and2_.a[6] = a;
    and2_.a[7] = a;
    and2_.a[8] = a;
    and2_.a[9] = a;
    and2_.a[10] = a;
    and2_.a[11] = a;
    and2_.a[12] = a;
    and2_.a[13] = a;
    and2_.a[14] = a;
    and2_.a[15] = a;
    
    adder_.alufn[0] = 1b0;
    adder_.alufn[1] = 1b0;
    adder_.alufn[2] = 1b0;
    adder_.alufn[3] = 1b0;
    adder_.alufn[4] = 1b0;
    adder_.alufn[5] = 1b0;
    adder_.alufn[6] = 1b0;
    adder_.alufn[7] = 1b0;
    adder_.alufn[8] = 1b0;
    adder_.alufn[9] = 1b0;
    adder_.alufn[10] = 1b0;
    adder_.alufn[11] = 1b0;
    adder_.alufn[12] = 1b0;
    adder_.alufn[13] = 1b0;
    adder_.alufn[14] = 1b0;
    adder_.alufn[15] = 1b0;    
    
    and2_.b[0] = 16x{b[0]};
    adder_.x[0] = 16b0;
    adder_.y[0] = and2_.out[0];
    
    and2_.b[1] = 16x{b[1]};
    adder_.x[1] = adder_.s[0];
    adder_.y[1][15:1] = and2_.out[1][14:0];
    adder_.y[1][0] = 1b0;
    
    and2_.b[2] = 16x{b[2]};
    adder_.x[2] = adder_.s[1];
    adder_.y[2][15:2] = and2_.out[2][13:0];
    adder_.y[2][1:0] = 2b0;
    
    and2_.b[3] = 16x{b[3]};
    adder_.x[3] = adder_.s[2];
    adder_.y[3][15:3] = and2_.out[3][12:0];
    adder_.y[3][2:0] = 3b0;
    
    and2_.b[4] = 16x{b[4]};
    adder_.x[4] = adder_.s[3];
    adder_.y[4][15:4] = and2_.out[4][11:0];
    adder_.y[4][3:0] = 4b0;
    
    and2_.b[5] = 16x{b[5]};
    adder_.x[5] = adder_.s[4];
    adder_.y[5][15:5] = and2_.out[5][10:0];
    adder_.y[5][4:0] = 5b0;
    
    and2_.b[6] = 16x{b[6]};
    adder_.x[6] = adder_.s[5];
    adder_.y[6][15:6] = and2_.out[6][9:0];
    adder_.y[6][5:0] = 6b0;
    
    and2_.b[7] = 16x{b[7]};
    adder_.x[7] = adder_.s[6];
    adder_.y[7][15:7] = and2_.out[7][8:0];
    adder_.y[7][6:0] = 7b0;
    
    and2_.b[8] = 16x{b[8]};
    adder_.x[8] = adder_.s[7];
    adder_.y[8][15:8] = and2_.out[8][7:0];
    adder_.y[8][7:0] = 8b0;
    
    and2_.b[9] = 16x{b[9]};
    adder_.x[9] = adder_.s[8];
    adder_.y[9][15:9] = and2_.out[9][6:0];
    adder_.y[9][8:0] = 9b0;
    
    and2_.b[10] = 16x{b[10]};
    adder_.x[10] = adder_.s[9];
    adder_.y[10][15:10] = and2_.out[10][5:0];
    adder_.y[10][9:0] = 10b0;
    
    and2_.b[11] = 16x{b[11]};
    adder_.x[11] = adder_.s[10];
    adder_.y[11][15:11] = and2_.out[11][4:0];
    adder_.y[11][10:0] = 11b0;
    
    and2_.b[12] = 16x{b[12]};
    adder_.x[12] = adder_.s[11];
    adder_.y[12][15:12] = and2_.out[12][3:0];
    adder_.y[12][11:0] = 12b0;
    
    and2_.b[13] = 16x{b[13]};
    adder_.x[13] = adder_.s[12];
    adder_.y[13][15:13] = and2_.out[13][2:0];
    adder_.y[13][12:0] = 13b0;
    
    and2_.b[14] = 16x{b[14]};
    adder_.x[14] = adder_.s[13];
    adder_.y[14][15:14] = and2_.out[14][1:0];
    adder_.y[14][13:0] = 14b0;
    
    and2_.b[15] = 16x{b[15]};
    adder_.x[15] = adder_.s[14];
    adder_.y[15][15] = and2_.out[15][0];
    adder_.y[15][14:0] = 15b0;
    
    out = adder_.s[15];
  }
}



