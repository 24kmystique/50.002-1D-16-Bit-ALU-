/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_valuestorer_outA;
  wire [16-1:0] M_valuestorer_outB;
  reg [1-1:0] M_valuestorer_btna;
  reg [1-1:0] M_valuestorer_btnb;
  reg [16-1:0] M_valuestorer_values;
  reg [1-1:0] M_valuestorer_clk;
  reg [1-1:0] M_valuestorer_rst;
  value_store_1 valuestorer (
    .btna(M_valuestorer_btna),
    .btnb(M_valuestorer_btnb),
    .values(M_valuestorer_values),
    .clk(M_valuestorer_clk),
    .rst(M_valuestorer_rst),
    .outA(M_valuestorer_outA),
    .outB(M_valuestorer_outB)
  );
  
  wire [1-1:0] M_slowclock_value;
  counter_2 slowclock (
    .clk(clk),
    .rst(rst),
    .value(M_slowclock_value)
  );
  
  wire [1-1:0] M_rstDetect_out;
  reg [1-1:0] M_rstDetect_in;
  edge_detector_3 rstDetect (
    .clk(clk),
    .in(M_rstDetect_in),
    .out(M_rstDetect_out)
  );
  
  wire [1-1:0] M_rstCond_out;
  button_conditioner_4 rstCond (
    .clk(clk),
    .in(io_button[2+0-:1]),
    .out(M_rstCond_out)
  );
  
  wire [(2'h2+0)-1:0] M_buttoncond_out;
  reg [(2'h2+0)-1:0] M_buttoncond_in;
  
  genvar GEN_buttoncond0;
  generate
  for (GEN_buttoncond0=0;GEN_buttoncond0<2'h2;GEN_buttoncond0=GEN_buttoncond0+1) begin: buttoncond_gen_0
    button_conditioner_4 buttoncond (
      .clk(clk),
      .in(M_buttoncond_in[GEN_buttoncond0*(1)+(1)-1-:(1)]),
      .out(M_buttoncond_out[GEN_buttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [1-1:0] M_slowClockEdge_out;
  reg [1-1:0] M_slowClockEdge_in;
  edge_detector_5 slowClockEdge (
    .clk(clk),
    .in(M_slowClockEdge_in),
    .out(M_slowClockEdge_out)
  );
  
  localparam CLKSPEED = 5'h1a;
  
  reg [25:0] M_counter_d, M_counter_q = 1'h0;
  
  wire [16-1:0] M_alu__out;
  reg [6-1:0] M_alu__alufn;
  reg [16-1:0] M_alu__x;
  reg [16-1:0] M_alu__y;
  alu_6 alu_ (
    .alufn(M_alu__alufn),
    .x(M_alu__x),
    .y(M_alu__y),
    .out(M_alu__out)
  );
  
  wire [1-1:0] M_alu_test__out;
  wire [7-1:0] M_alu_test__led;
  reg [1-1:0] M_alu_test__clk;
  reg [1-1:0] M_alu_test__rst;
  reg [6-1:0] M_alu_test__alufn;
  reg [1-1:0] M_alu_test__disrupiton;
  reg [1-1:0] M_alu_test__button;
  alu_test_7 alu_test_ (
    .clk(M_alu_test__clk),
    .rst(M_alu_test__rst),
    .alufn(M_alu_test__alufn),
    .disrupiton(M_alu_test__disrupiton),
    .button(M_alu_test__button),
    .out(M_alu_test__out),
    .led(M_alu_test__led)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_8 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam MANUAL_state = 1'd0;
  localparam AUTO_state = 1'd1;
  
  reg M_state_d, M_state_q = MANUAL_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_counter_d = M_counter_q + 1'h1;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_slowClockEdge_in = M_slowclock_value;
    M_buttoncond_in[0+0-:1] = io_button[0+0-:1];
    M_buttoncond_in[1+0-:1] = io_button[1+0-:1];
    M_rstDetect_in = M_rstCond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_valuestorer_clk = clk;
    M_valuestorer_btna = io_button[3+0-:1];
    M_valuestorer_btnb = io_button[4+0-:1];
    M_valuestorer_values[0+7-:8] = io_dip[0+7-:8];
    M_valuestorer_values[8+7-:8] = io_dip[8+7-:8];
    M_valuestorer_rst = M_rstDetect_out;
    M_alu__alufn = io_dip[16+0+5-:6];
    M_alu__x = M_valuestorer_outA;
    M_alu__y = M_valuestorer_outB;
    M_alu_test__alufn = io_dip[16+0+5-:6];
    M_alu_test__rst = rst;
    M_alu_test__clk = M_slowclock_value;
    M_alu_test__disrupiton = M_buttoncond_out[1+0-:1];
    M_alu_test__button = M_buttoncond_out[0+0-:1];
    io_led[16+0+5-:6] = io_dip[16+0+5-:6];
    
    case (M_state_q)
      MANUAL_state: begin
        if (io_dip[16+7+0-:1]) begin
          M_state_d = AUTO_state;
        end else begin
          M_state_d = MANUAL_state;
          io_led[8+7-:8] = M_alu__out[8+7-:8];
          io_led[0+7-:8] = M_alu__out[0+7-:8];
        end
      end
      AUTO_state: begin
        if (io_dip[16+7+0-:1]) begin
          io_led[0+0+0-:1] = M_alu_test__out;
          io_led[8+1+6-:7] = M_alu_test__led;
          io_led[8+0+0-:1] = M_buttoncond_out[0+0-:1];
          M_state_d = AUTO_state;
        end else begin
          M_state_d = MANUAL_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
