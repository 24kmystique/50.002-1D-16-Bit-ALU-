/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module sixteen_bit_shifter_15 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] out
  );
  
  
  
  wire [(3'h6+0)*16-1:0] M_mux__out;
  reg [(3'h6+0)*16-1:0] M_mux__a1;
  reg [(3'h6+0)*16-1:0] M_mux__a0;
  reg [(3'h6+0)-1:0] M_mux__b;
  
  genvar GEN_mux_0;
  generate
  for (GEN_mux_0=0;GEN_mux_0<3'h6;GEN_mux_0=GEN_mux_0+1) begin: mux__gen_0
    sixteen_bit_mux_two_23 mux_ (
      .a1(M_mux__a1[GEN_mux_0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .a0(M_mux__a0[GEN_mux_0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .b(M_mux__b[GEN_mux_0*(1)+(1)-1-:(1)]),
      .out(M_mux__out[GEN_mux_0*(5'h10)+(5'h10)-1-:(5'h10)])
    );
  end
  endgenerate
  
  wire [1-1:0] M_and1__out;
  reg [1-1:0] M_and1__a;
  reg [1-1:0] M_and1__b;
  and_gate_24 and1_ (
    .a(M_and1__a),
    .b(M_and1__b),
    .out(M_and1__out)
  );
  
  wire [1-1:0] M_and2__out;
  reg [1-1:0] M_and2__a;
  reg [1-1:0] M_and2__b;
  and_gate_24 and2_ (
    .a(M_and2__a),
    .b(M_and2__b),
    .out(M_and2__out)
  );
  
  reg right;
  
  always @* begin
    M_mux__a0[0+0+15-:16] = a[0+15-:16];
    M_mux__a1[0+0+0-:1] = a[15+0-:1];
    M_mux__a1[0+1+0-:1] = a[14+0-:1];
    M_mux__a1[0+2+0-:1] = a[13+0-:1];
    M_mux__a1[0+3+0-:1] = a[12+0-:1];
    M_mux__a1[0+4+0-:1] = a[11+0-:1];
    M_mux__a1[0+5+0-:1] = a[10+0-:1];
    M_mux__a1[0+6+0-:1] = a[9+0-:1];
    M_mux__a1[0+7+0-:1] = a[8+0-:1];
    M_mux__a1[0+8+0-:1] = a[7+0-:1];
    M_mux__a1[0+9+0-:1] = a[6+0-:1];
    M_mux__a1[0+10+0-:1] = a[5+0-:1];
    M_mux__a1[0+11+0-:1] = a[4+0-:1];
    M_mux__a1[0+12+0-:1] = a[3+0-:1];
    M_mux__a1[0+13+0-:1] = a[2+0-:1];
    M_mux__a1[0+14+0-:1] = a[1+0-:1];
    M_mux__a1[0+15+0-:1] = a[0+0-:1];
    M_mux__b[0+0-:1] = alufn[0+0-:1];
    M_and1__a = alufn[1+0-:1];
    M_and1__b = alufn[0+0-:1];
    M_and2__a = M_and1__out;
    M_and2__b = a[15+0-:1];
    right = M_and2__out;
    M_mux__a0[16+15-:16] = M_mux__out[0+15-:16];
    M_mux__a1[16+8+7-:8] = M_mux__out[0+0+7-:8];
    M_mux__a1[16+0+7-:8] = {4'h8{right}};
    M_mux__b[1+0-:1] = b[3+0-:1];
    M_mux__a0[32+15-:16] = M_mux__out[16+15-:16];
    M_mux__a1[32+4+11-:12] = M_mux__out[16+0+11-:12];
    M_mux__a1[32+0+3-:4] = {3'h4{right}};
    M_mux__b[2+0-:1] = b[2+0-:1];
    M_mux__a0[48+15-:16] = M_mux__out[32+15-:16];
    M_mux__a1[48+2+13-:14] = M_mux__out[32+0+13-:14];
    M_mux__a1[48+0+1-:2] = {2'h2{right}};
    M_mux__b[3+0-:1] = b[1+0-:1];
    M_mux__a0[64+15-:16] = M_mux__out[48+15-:16];
    M_mux__a1[64+1+14-:15] = M_mux__out[48+0+14-:15];
    M_mux__a1[64+0+0-:1] = right;
    M_mux__b[4+0-:1] = b[0+0-:1];
    M_mux__a0[80+15-:16] = M_mux__out[64+15-:16];
    M_mux__a1[80+0+0-:1] = M_mux__out[64+15+0-:1];
    M_mux__a1[80+1+0-:1] = M_mux__out[64+14+0-:1];
    M_mux__a1[80+2+0-:1] = M_mux__out[64+13+0-:1];
    M_mux__a1[80+3+0-:1] = M_mux__out[64+12+0-:1];
    M_mux__a1[80+4+0-:1] = M_mux__out[64+11+0-:1];
    M_mux__a1[80+5+0-:1] = M_mux__out[64+10+0-:1];
    M_mux__a1[80+6+0-:1] = M_mux__out[64+9+0-:1];
    M_mux__a1[80+7+0-:1] = M_mux__out[64+8+0-:1];
    M_mux__a1[80+8+0-:1] = M_mux__out[64+7+0-:1];
    M_mux__a1[80+9+0-:1] = M_mux__out[64+6+0-:1];
    M_mux__a1[80+10+0-:1] = M_mux__out[64+5+0-:1];
    M_mux__a1[80+11+0-:1] = M_mux__out[64+4+0-:1];
    M_mux__a1[80+12+0-:1] = M_mux__out[64+3+0-:1];
    M_mux__a1[80+13+0-:1] = M_mux__out[64+2+0-:1];
    M_mux__a1[80+14+0-:1] = M_mux__out[64+1+0-:1];
    M_mux__a1[80+15+0-:1] = M_mux__out[64+0+0-:1];
    M_mux__b[5+0-:1] = alufn[0+0-:1];
    out = M_mux__out[80+15-:16];
  end
endmodule
